{"ast":null,"code":"var _jsxFileName = \"/Users/williammoss/wordgame-ts/src/Board.tsx\";\nimport React from 'react'; // importing FunctionComponent\n\nimport './Board.css';\nimport { Square } from \"./Square\";\nimport { isElement } from \"react-dom/test-utils\";\nexport const Board = ({\n  letters,\n  letterMultiplier,\n  wordMultiplier,\n  onDrop\n}) => /*#__PURE__*/React.createElement(\"div\", {\n  className: \"tileGrid\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }\n}, Array.from(Array(225).keys()).map(key => /*#__PURE__*/React.createElement(\"div\", {\n  key: key,\n  id: \"b\" + key,\n  className: \"tileContainer\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 13\n  }\n}, /*#__PURE__*/React.createElement(Square, {\n  id: key + \"_square\",\n  onDrop: onDrop,\n  key: key + \"_square\",\n  tile: getTile(key, letters),\n  letterMultiplier: letterMultiplier[Math.floor(key / 15)][key % 15],\n  wordMultiplier: wordMultiplier[Math.floor(key / 15)][key % 15],\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 17\n  }\n}))));\n\nlet getTile = (num, letters) => {\n  if (letters[Math.floor(num / 15)]) {\n    if (isElement(letters[Math.floor(num / 15)][num % 15])) {\n      return letters[Math.floor(num / 15)][num % 15];\n    }\n  }\n\n  return \"\";\n};","map":{"version":3,"sources":["/Users/williammoss/wordgame-ts/src/Board.tsx"],"names":["React","Square","isElement","Board","letters","letterMultiplier","wordMultiplier","onDrop","Array","from","keys","map","key","getTile","Math","floor","num"],"mappings":";AAAA,OAAOA,KAAP,MAAoF,OAApF,C,CAA6F;;AAC7F,OAAO,aAAP;AACA,SAAQC,MAAR,QAAqB,UAArB;AAEA,SAAQC,SAAR,QAAwB,sBAAxB;AAYA,OAAO,MAAMC,KAAoC,GAAG,CAAC;AAACC,EAAAA,OAAD;AAAUC,EAAAA,gBAAV;AAA4BC,EAAAA,cAA5B;AAA4CC,EAAAA;AAA5C,CAAD,kBAChD;AAAK,EAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACKC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAAC,GAAD,CAAL,CAAWE,IAAX,EAAX,EAA8BC,GAA9B,CAAmCC,GAAD,iBAC/B;AAAK,EAAA,GAAG,EAAEA,GAAV;AAAe,EAAA,EAAE,EAAE,MAAMA,GAAzB;AAA8B,EAAA,SAAS,EAAC,eAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACI,oBAAC,MAAD;AAAQ,EAAA,EAAE,EAAEA,GAAG,GAAG,SAAlB;AACQ,EAAA,MAAM,EAAIL,MADlB;AAEQ,EAAA,GAAG,EAAEK,GAAG,GAAG,SAFnB;AAGQ,EAAA,IAAI,EAAEC,OAAO,CAACD,GAAD,EAAMR,OAAN,CAHrB;AAIQ,EAAA,gBAAgB,EAAEC,gBAAgB,CAACS,IAAI,CAACC,KAAL,CAAWH,GAAG,GAAG,EAAjB,CAAD,CAAhB,CAAuCA,GAAG,GAAG,EAA7C,CAJ1B;AAKQ,EAAA,cAAc,EAAEN,cAAc,CAACQ,IAAI,CAACC,KAAL,CAAWH,GAAG,GAAG,EAAjB,CAAD,CAAd,CAAqCA,GAAG,GAAG,EAA3C,CALxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,CADH,CADL,CADG;;AAaP,IAAIC,OAAO,GAAG,CAACG,GAAD,EAAYZ,OAAZ,KAAiD;AAC3D,MAAGA,OAAO,CAACU,IAAI,CAACC,KAAL,CAAWC,GAAG,GAAG,EAAjB,CAAD,CAAV,EAAiC;AAC7B,QAAGd,SAAS,CAACE,OAAO,CAACU,IAAI,CAACC,KAAL,CAAWC,GAAG,GAAG,EAAjB,CAAD,CAAP,CAA8BA,GAAG,GAAG,EAApC,CAAD,CAAZ,EAAsD;AAClD,aAAOZ,OAAO,CAACU,IAAI,CAACC,KAAL,CAAWC,GAAG,GAAG,EAAjB,CAAD,CAAP,CAA8BA,GAAG,GAAG,EAApC,CAAP;AACH;AACJ;;AACD,SAAO,EAAP;AACH,CAPD","sourcesContent":["import React, {DragEventHandler, FunctionComponent, ReactNode, ReactNodeArray} from 'react'; // importing FunctionComponent\nimport './Board.css';\nimport {Square} from \"./Square\";\nimport {Tile} from \"./Tile\";\nimport {isElement} from \"react-dom/test-utils\";\ntype Char = 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K'\n    | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X'\n    | 'Y' | 'Z' | '_' | ' '\n\ntype BoardProps = {\n    letters : ReactNode[][]\n    letterMultiplier : number[][]\n    wordMultiplier : number[][]\n    onDrop : DragEventHandler\n}\n\nexport const Board: FunctionComponent<BoardProps> = ({letters, letterMultiplier, wordMultiplier, onDrop}) =>\n    <div className=\"tileGrid\">\n        {Array.from(Array(225).keys()).map((key) =>\n            <div key={key} id={\"b\" + key} className=\"tileContainer\">\n                <Square id={key + \"_square\"}\n                        onDrop = {onDrop}\n                        key={key + \"_square\"}\n                        tile={getTile(key, letters)}\n                        letterMultiplier={letterMultiplier[Math.floor(key / 15)][key % 15]}\n                        wordMultiplier={wordMultiplier[Math.floor(key / 15)][key % 15]}/>\n            </div>)}\n    </div>;\n\nlet getTile = (num:number,letters:ReactNode[][]): ReactNode => {\n    if(letters[Math.floor(num / 15)]){\n        if(isElement(letters[Math.floor(num / 15)][num % 15])){\n            return letters[Math.floor(num / 15)][num % 15];\n        }\n    }\n    return \"\";\n}\n\n"]},"metadata":{},"sourceType":"module"}